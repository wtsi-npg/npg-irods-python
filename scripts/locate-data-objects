#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2023 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Keith James <kdj@sanger.ac.uk>

import argparse
from datetime import datetime, timedelta

import sqlalchemy
import structlog
from partisan.irods import AVU, query_metadata
from sqlalchemy.orm import Session

from npg_irods.cli import add_logging_arguments, configure_logging, parse_iso_date
from npg_irods.db import DBConfig
from npg_irods.db.mlwh import find_consent_withdrawn_samples
from npg_irods.metadata import illumina
from npg_irods.metadata.lims import TrackedSample
from npg_irods.version import version

description = """
A utility for locating sets of data objects in iRODS.

Currently this supports one mode of operation, which is to find data objects related to
samples whose consent for data use has been withdrawn.

The paths of the data objects located are printed to STDOUT.
"""

parser = argparse.ArgumentParser(
    description=description, formatter_class=argparse.RawDescriptionHelpFormatter
)
add_logging_arguments(parser)
parser.add_argument(
    "--database-config",
    "--database_config",
    help="Configuration file for database connection.",
    type=argparse.FileType("r"),
    required=True,
)

parser.add_argument(
    "--zone",
    help="Specify a federated iRODS zone in which to find data objects to check. "
    "This is not required if the target collections are in the local zone.",
    type=str,
)
parser.add_argument("--version", help="Print the version and exit", action="store_true")

subparsers = parser.add_subparsers(title="queries", help="Data object location queries")


def consent_withdrawn(cli_args):
    dbconfig = DBConfig.from_file(cli_args.database_config.name, "mlwh_ro")
    engine = sqlalchemy.create_engine(dbconfig.url)
    with Session(engine) as session:
        num_processed, num_errors = 0, 0
        for s in find_consent_withdrawn_samples(session):
            log.info("Finding data objects for", sample=s)
            num_processed += 1

            if s.id_sample_lims is None:
                log.error("Missing id_sample_lims", sample=s)
                num_errors += 1
                continue

            for obj in query_metadata(
                AVU(TrackedSample.ID, s.id_sample_lims),
                data_object=True,
                collection=False,
                zone=cli_args.zone,
            ):
                print(obj)

    log.info(f"Processed {num_processed} with {num_errors} errors")
    if num_errors:
        exit(1)


cwdr_parser = subparsers.add_parser(
    "consent-withdrawn",
    help="Find data objects related to samples whose consent for data use has "
    "been withdrawn.",
)
cwdr_parser.set_defaults(func=consent_withdrawn)

ilup_parser = subparsers.add_parser(
    "illumina-updates",
    help="Find data objects related to the Illumina sequencing platforms",
)
ilup_parser.add_argument(
    "--begin-date",
    "--begin_date",
    help="Limit data object found to those changed after this date. "
    "Defaults to 14 days ago. "
    "The argument must be an ISO8601 UTC date or date and time e.g. 2022-01-30, "
    "2022-01-30T11:11:03Z",
    type=parse_iso_date,
    default=datetime.now() - timedelta(days=14),
)


def illumina_updates(cli_args):
    dbconfig = DBConfig.from_file(cli_args.database_config.name, "mlwh_ro")
    engine = sqlalchemy.create_engine(dbconfig.url)
    with Session(engine) as session:
        for s in illumina.recently_changed(session, start_time=cli_args.begin_date):
            print(s)


ilup_parser.set_defaults(func=illumina_updates)

args = parser.parse_args()
configure_logging(
    config_file=args.log_config,
    debug=args.debug,
    verbose=args.verbose,
    colour=args.colour,
    json=args.json,
)
log = structlog.get_logger("main")


def main():
    if args.version:
        print(version())
        exit(0)
    args.func(args)


if __name__ == "__main__":
    main()

#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2022 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Keith James <kdj@sanger.ac.uk>

import argparse
import logging
import sys

import structlog

from npg_irods.utilities import repair_common_metadata, repair_checksums
from npg_irods.version import version

description = """
Reads iRODS data object paths from a file or STDIN, one per line and repairs
their checksums and checksum metadata, if necessary.

If any of the paths initially fail their checksum check and could not be repaired,   
the exit code will be non-zero and an error message summarising the results will be 
sent to STDERR.
"""

parser = argparse.ArgumentParser(
    description=description, formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument(
    "-i",
    "--input",
    help="Input filename",
    type=argparse.FileType("r"),
    default=sys.stdin,
)

parser.add_argument(
    "-o",
    "--output",
    help="Output filename",
    type=argparse.FileType("w"),
    default=sys.stdout,
)

parser.add_argument(
    "--print-repair",
    help="Print to output those paths that were repaired. Defaults to True.",
    action="store_true",
)

parser.add_argument(
    "--print-fail",
    help="Print to output those paths that require repair, where the repair failed. "
    "Defaults to False.",
    action="store_true",
)


parser.add_argument(
    "--json",
    help="Use JSON log rendering.",
    action="store_true",
)

parser.add_argument(
    "--colour",
    help="Use coloured log rendering to the console",
    action="store_true",
)

parser.add_argument(
    "-c",
    "--clients",
    help="Number of baton clients to use. Defaults to 4",
    type=int,
    default=4,
)


parser.add_argument(
    "-t",
    "--threads",
    help="Number of threads to use. Defaults to 4",
    type=int,
    default=4,
)

parser.add_argument("--version", help="Print the version and exit", action="store_true")

parser.add_argument(
    "-d", "--debug", help="Enable DEBUG level logging to STDERR", action="store_true"
)
parser.add_argument(
    "-v", "--verbose", help="Enable INFO level logging to STDERR", action="store_true"
)

args = parser.parse_args()

level = logging.ERROR
if args.debug:
    level = logging.DEBUG
elif args.verbose:
    level = logging.INFO

logging.basicConfig(
    level=level,
    encoding="utf-8",
)


log_processors = [
    structlog.stdlib.add_logger_name,
    structlog.stdlib.add_log_level,
    structlog.processors.TimeStamper(fmt="iso", utc=True),
]
if args.json:
    log_processors.append(structlog.processors.JSONRenderer())
else:
    log_processors.append(structlog.dev.ConsoleRenderer(colors=args.colour))

structlog.configure(
    processors=log_processors,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

log = structlog.get_logger("main")


def main():
    if args.version:
        print(version())
        exit(0)

    num_processed, num_repaired, num_errors = repair_checksums(
        args.input,
        args.output,
        num_threads=args.threads,
        num_clients=args.clients,
        print_repair=args.print_repair,
        print_fail=args.print_fail,
    )

    if num_errors:
        log.error(
            "Some repairs did not succeed",
            num_processed=num_processed,
            num_repaired=num_repaired,
            num_errors=num_errors,
        )
        exit(1)

    if num_repaired:
        log.info(
            "All paths repaired",
            num_processed=num_processed,
            num_repaired=num_repaired,
            num_errors=num_errors,
        )
    else:
        log.info(
            "No paths required repair",
            num_processed=num_processed,
            num_repaired=num_repaired,
            num_errors=num_errors,
        )


if __name__ == "__main__":
    main()
